Technical overview - xpilot AI project, group 28

The approach we chose early on was to keep it all in one class. We let different modes dictate how the ship is supposed to act, and what it does by default. The modes are decided based on if-loops that determine what is going on in the game. 

All the functions can be called and accessed from any mode, depending on what is needed. Our reasoning for this is to allow for easier modification throughout (and possibly after) the project, along with making it easier to read. In its current form it's easy to go through, see what functions are called and used, and what they are used for. Splitting the program up into classes makes it harder to get a complete view of what is going on, and also means that the two classes may require the same function or identical variables at the same time. Therefor we feel that our approach is both more efficient and easier to work with. 

The dodge function has been rewritten dozens of times at this point. At this point the end product is based entirely on linear equations and trigonometry. At first we attempted to use snippets of code from elsewhere and find a working way, which we did, but far from satisfactory. As we did not completely understand the math behind it, it was near impossible to get it tuned. Now it is based entirely on math we understand, and although far bulkier than the initial versions, it is easier to fine tune and optimize. 

It loops through every shot ID from 0 to 99 within a radius of 200 units from the ship and tests the danger of all shots that are hostile (have a danger rating above -1). It calculates a linear equation for the shot trajectory and compares it with the current linear equation of the ship. If the two lines cross and, the shot and the ship are estimated to cross it at approximately the same time, it kicks in dodge mode. Dodge mode makes it change course slightly, and test for continued danger. If it's still in danger of getting hit it will keep changing the course until it determines that the danger is over, at which point it goes back to ready mode to determine what the best course of action would be. 

The wall finder and wall evasion is largely a modification and extension of the wall finder we got in one of the examples. Essentially it scans straight ahead for walls, and if it finds one it turns 180 degress, and thrusts to avoid hitting, then goes back into ready mode and on to whatever it was doing prior to the wall becoming an obstacle.





By: Magnus Nielsen, John Litborn, Christoffer Karlborg
